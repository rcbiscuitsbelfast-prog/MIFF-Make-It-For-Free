name: Build and Validate (MIFF)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  setup:
    name: Setup environment and cache
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🧰 Setup Node (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: ♻️ Cache npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 📦 Install dependencies
        run: npm ci || npm i

      - name: 🔎 Preflight: root test script present
        run: node scripts/ci-preflight.js

      - name: 📝 Onboarding hint
        run: |
          echo "MIFF CI initialized. For local dev: npm ci && npm run start:grove"

  validate-assets:
    name: Validate assets (remix-safe)
    needs: setup
    runs-on: ubuntu-latest
    env:
      REMIX_SAFE: '1'
      MOBILE_FIRST: '1'
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🧰 Setup Node (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: ♻️ Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: 📦 Install dependencies
        run: npm ci || npm i

      - name: 🔎 Validate nested packages scripts
        run: node scripts/ci-script-validator.js

      - name: 🔍 Run asset validation
        run: |
          mkdir -p logs
          node scripts/validate-assets.js > logs/validate-assets.log 2>&1

      - name: 📤 Upload validation logs
        uses: actions/upload-artifact@v4
        with:
          name: validate-assets-logs
          path: logs/validate-assets.log

  orchestrate-scenarios:
    name: Orchestrate scenarios (matrix playtest)
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        agent: [mobile, desktop]
        seed: [42, 123]
    env:
      REMIX_SAFE: '1'
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🧰 Setup Node (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: ♻️ Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: 📦 Install dependencies
        run: npm ci || npm i

      - name: ▶️ Orchestrate (agent=${{ matrix.agent }}, seed=${{ matrix.seed }})
        run: |
          mkdir -p logs
          node scripts/orchestrate.js --agent ${{ matrix.agent }} --seed ${{ matrix.seed }} > logs/orchestrate-${{ matrix.agent }}-${{ matrix.seed }}.log 2>&1

      - name: 📤 Upload orchestrate logs
        uses: actions/upload-artifact@v4
        with:
          name: orchestrate-logs-${{ matrix.agent }}-${{ matrix.seed }}
          path: logs/orchestrate-${{ matrix.agent }}-${{ matrix.seed }}.log

  lint:
    name: Lint (ESLint)
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4

      - name: 🧰 Setup Node (LTS)
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'

      - name: ♻️ Restore npm cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: 📦 Install dependencies
        run: npm ci || npm i

      - name: 🔎 Check ESLint availability
        id: has_eslint
        run: |
          if [ -f node_modules/.bin/eslint ]; then echo "exists=true" >> $GITHUB_OUTPUT; else echo "exists=false" >> $GITHUB_OUTPUT; fi

      - name: 🧹 Run ESLint on src/ and scenarios/
        if: steps.has_eslint.outputs.exists == 'true'
        run: |
          mkdir -p logs
          npx eslint src/ sampler/scenarios/ > logs/eslint.log 2>&1 || true

      - name: ⚠️ Skip ESLint (tooling not installed)
        if: steps.has_eslint.outputs.exists != 'true'
        run: |
          mkdir -p logs
          echo "ESLint not installed; skipping. Add it to devDependencies to enable CI linting." | tee logs/eslint.log

      - name: 📤 Upload lint logs
        uses: actions/upload-artifact@v4
        with:
          name: lint-logs
          path: logs/eslint.log

  report:
    name: Report summary
    needs: [validate-assets, orchestrate-scenarios, lint]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Download artifacts (validate assets)
        uses: actions/download-artifact@v4
        with:
          name: validate-assets-logs
          path: artifacts/validate-assets

      - name: 📥 Download artifacts (lint)
        uses: actions/download-artifact@v4
        with:
          name: lint-logs
          path: artifacts/lint

      - name: 📥 Download artifacts (orchestrate mobile 42)
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: orchestrate-logs-mobile-42
          path: artifacts/orchestrate

      - name: 📥 Download artifacts (orchestrate mobile 123)
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: orchestrate-logs-mobile-123
          path: artifacts/orchestrate

      - name: 📥 Download artifacts (orchestrate desktop 42)
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: orchestrate-logs-desktop-42
          path: artifacts/orchestrate

      - name: 📥 Download artifacts (orchestrate desktop 123)
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: orchestrate-logs-desktop-123
          path: artifacts/orchestrate

      - name: 🧾 Summarize
        run: |
          echo "## MIFF Build & Validate Report" >> $GITHUB_STEP_SUMMARY
          echo "- Asset validation: $(tail -n +1 artifacts/validate-assets/validate-assets.log | sed -n '1,10p' | wc -l) lines captured" >> $GITHUB_STEP_SUMMARY || true
          echo "- Lint: $(tail -n +1 artifacts/lint/eslint.log | sed -n '1,10p' | wc -l) lines captured" >> $GITHUB_STEP_SUMMARY || true
          echo "- Orchestration logs downloaded: $(ls -1 artifacts/orchestrate | wc -l) files" >> $GITHUB_STEP_SUMMARY || true
          echo "\nContributor tips: If a script is missing, see README quickstart. Ensure mobile-first layout and remix-safe assets." >> $GITHUB_STEP_SUMMARY

      - name: 🌫️ Smoke check Witcher Grove
        if: always()
        run: node sampler/smoke.js

      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'artifacts/validate-assets/validate-assets.log';
            let snippet = '';
            try { snippet = fs.readFileSync(path, 'utf-8').split('\n').slice(0, 20).join('\n'); } catch (e) {}
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `MIFF Build & Validate Summary\n\n- See workflow summary for details.\n- Asset validation snippet:\n\n\`\`\`\n${snippet}\n\`\`\``
            });

